Every { starts JSON and should be followed by a " which will be a key. We should immediately parse this key

Our lexer should return an integer back to the original function once the key has been parse.

It should encounter a : which indicates the start of a value.

We should then parse the key similar to how we parse the key.

We'll parse up to a , which indicates the end of a value.

A comma will not ALWAYS be the start of a new JSON key value pair.

Inside of a [ that isn't an array of JSON it's just values. This means
if we have [ that is followed by a " or some number or bool, we're in an array of values. This means we are parsing vals





"{
\"$implementationId\":\"deviceConfiguration--hardenedUncPathEnabled\",
\"hardenedUncPaths\":
    [
        {
            \"serverPath\":\"\\\\\\\\*\\\\SYSVOL\",
            \"securityFlags\":
                [
                    \"requireMutualAuthentication\",\"requireIntegrity\"
                ]
        },
        {
            \"serverPath\":\"\\\\\\\\*\\\\NETLOGON\",
                \"securityFlags\":
                    [
                        \"requireMutualAuthentication\",\"requireIntegrity\"
                    ]
        }
    ]
}"

hardenedUncPaths_serverPath,SYSVOL - NETLOGIN


Rule 1 All JSON must start with {
Rule 2 All JSON must end with }
Rule 3 All { must be followed with "
Rule 4 A combination of {" leads into a KEY
Rule 5 This key must have a " at the end of the KEY name
Rule 6 KEY is seperated from the VALUE by a :
Rule 7 immediately after : we can have the following possiblities
    1. " will start a value and like KEY will run up to the ending ". This will be immediately followed by a ,
    2. [ which will contain possibly more JSON or if not additional JSON two values
Rule 8 a valid KEY VALUE pair will always be followed by a ,
Rule 9 All [ must have a closing ]
Rule 10 All { must have a closing }
Rule 11 All " must have a closing "

The following are the reserved characters of JSON

{ } [ ] , " :
